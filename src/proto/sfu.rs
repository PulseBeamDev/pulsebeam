// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientSubscribePayload {
    /// The client's MID (transceiver slot) to use for this track.
    #[prost(string, tag = "1")]
    pub mid: ::prost::alloc::string::String,
    /// The application-level ID of the remote track to subscribe to.
    #[prost(string, tag = "2")]
    pub remote_track_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientUnsubscribePayload {
    /// The client's MID (transceiver slot) to unsubscribe from.
    #[prost(string, tag = "1")]
    pub mid: ::prost::alloc::string::String,
}
/// ClientMessage encapsulates all possible messages from client to SFU.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientMessage {
    #[prost(oneof = "client_message::Payload", tags = "1, 2")]
    pub payload: ::core::option::Option<client_message::Payload>,
}
/// Nested message and enum types in `ClientMessage`.
pub mod client_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        #[prost(message, tag = "1")]
        Subscribe(super::ClientSubscribePayload),
        #[prost(message, tag = "2")]
        Unsubscribe(super::ClientUnsubscribePayload),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackInfo {
    /// The ID of the newly available remote track.
    #[prost(string, tag = "1")]
    pub track_id: ::prost::alloc::string::String,
    /// The kind of track.
    #[prost(enumeration = "TrackKind", tag = "2")]
    pub kind: i32,
    /// The ID of the participant who published this track.
    #[prost(string, tag = "3")]
    pub participant_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackSwitchInfo {
    /// The client's MID that the SFU will use (confirming client's request).
    #[prost(string, tag = "2")]
    pub mid: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "3")]
    pub remote_track: ::core::option::Option<TrackInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackPublishedPayload {
    #[prost(message, optional, tag = "1")]
    pub remote_track: ::core::option::Option<TrackInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackUnpublishedPayload {
    /// The ID of the remote track that is no longer available.
    #[prost(string, tag = "1")]
    pub remote_track_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TrackSwitchedPayload {
    #[prost(message, repeated, tag = "1")]
    pub switches: ::prost::alloc::vec::Vec<TrackSwitchInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ErrorPayload {
    /// General error message from the SFU.
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
}
/// ServerMessage encapsulates all possible messages from SFU to client.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerMessage {
    #[prost(oneof = "server_message::Payload", tags = "1, 2, 3, 4")]
    pub payload: ::core::option::Option<server_message::Payload>,
}
/// Nested message and enum types in `ServerMessage`.
pub mod server_message {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Payload {
        /// General error from SFU.
        #[prost(message, tag = "1")]
        Error(super::ErrorPayload),
        /// SFU informs client a new remote track is available.
        #[prost(message, tag = "2")]
        TrackPublished(super::TrackPublishedPayload),
        /// SFU informs client a remote track is no longer available.
        #[prost(message, tag = "3")]
        TrackUnpublished(super::TrackUnpublishedPayload),
        /// SFU confirms track switching for a mid
        #[prost(message, tag = "4")]
        TrackSwitched(super::TrackSwitchedPayload),
    }
}
/// Represents the kind of media track.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrackKind {
    Unspecified = 0,
    Video = 1,
    Audio = 2,
}
impl TrackKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TRACK_KIND_UNSPECIFIED",
            Self::Video => "VIDEO",
            Self::Audio => "AUDIO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TRACK_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "VIDEO" => Some(Self::Video),
            "AUDIO" => Some(Self::Audio),
            _ => None,
        }
    }
}
