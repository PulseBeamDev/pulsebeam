// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct MediaState {
    #[prost(bool, tag = "1")]
    pub audio: bool,
    #[prost(bool, tag = "2")]
    pub video: bool,
}
/// Describes the media state of a participant.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParticipantMediaState {
    /// The ID provided by the developer for this participant
    #[prost(string, tag = "1")]
    pub external_participant_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub state: ::core::option::Option<MediaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ClientIntent {
    #[prost(oneof = "client_intent::Intent", tags = "1, 3")]
    pub intent: ::core::option::Option<client_intent::Intent>,
}
/// Nested message and enum types in `ClientIntent`.
pub mod client_intent {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Intent {
        /// Client indicates desire to publish a media kind.
        #[prost(message, tag = "1")]
        PublishMediaIntent(super::PublishMediaIntent),
        /// Client subscribes to media from a specific participant.
        #[prost(message, tag = "3")]
        SubscribeToParticipantIntent(super::SubscribeToParticipantIntent),
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PublishMediaIntent {
    #[prost(message, optional, tag = "1")]
    pub state: ::core::option::Option<MediaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubscribeToParticipantIntent {
    #[prost(string, tag = "1")]
    pub target_external_participant_id: ::prost::alloc::string::String,
    #[prost(message, optional, tag = "2")]
    pub state: ::core::option::Option<MediaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ServerNotification {
    #[prost(oneof = "server_notification::Notification", tags = "1, 2, 3, 4, 5, 6")]
    pub notification: ::core::option::Option<server_notification::Notification>,
}
/// Nested message and enum types in `ServerNotification`.
pub mod server_notification {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Notification {
        /// Sent once after this DataChannel is ready, providing initial room state.
        #[prost(message, tag = "1")]
        InitialRoomState(super::InitialRoomState),
        #[prost(message, tag = "2")]
        ParticipantJoined(super::ParticipantJoined),
        #[prost(message, tag = "3")]
        ParticipantLeft(super::ParticipantLeft),
        /// Informs client that a media stream (from self or other) is now available.
        /// The actual media will arrive via WebRTC 'ontrack' events (negotiated out-of-band).
        #[prost(message, tag = "4")]
        MediaStreamAvailable(super::MediaStreamAvailable),
        /// Informs client that a media stream (from self or other) is no longer available.
        #[prost(message, tag = "5")]
        MediaStreamUnavailable(super::MediaStreamUnavailable),
        /// Generic error if a client's intent cannot be fulfilled.
        #[prost(message, tag = "6")]
        IntentError(super::IntentProcessingError),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InitialRoomState {
    /// The external_participant_id this specific client is known by.
    #[prost(string, tag = "1")]
    pub self_external_participant_id: ::prost::alloc::string::String,
    /// State of all other participants, identified by their respective external_participant_ids.
    #[prost(message, repeated, tag = "2")]
    pub current_participants_media_states: ::prost::alloc::vec::Vec<
        ParticipantMediaState,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParticipantJoined {
    /// Describes the new participant and their initial media
    #[prost(message, optional, tag = "1")]
    pub participant_media_state: ::core::option::Option<ParticipantMediaState>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ParticipantLeft {
    /// External ID of the participant who left
    #[prost(string, tag = "1")]
    pub external_participant_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MediaStreamAvailable {
    /// External ID of the participant whose media is now available
    #[prost(string, tag = "1")]
    pub producer_external_participant_id: ::prost::alloc::string::String,
    /// The kind of media that is available
    #[prost(enumeration = "TrackKind", tag = "2")]
    pub kind: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct MediaStreamUnavailable {
    /// External ID of the participant whose media is no longer available
    #[prost(string, tag = "1")]
    pub producer_external_participant_id: ::prost::alloc::string::String,
    /// The kind of media that became unavailable
    #[prost(enumeration = "TrackKind", tag = "2")]
    pub kind: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IntentProcessingError {
    /// Example: if a client tries to publish video when already publishing video.
    /// optional TrackKind related_kind = 2; // Could provide context on the failed intent
    #[prost(string, tag = "1")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TrackKind {
    Audio = 0,
    Video = 1,
}
impl TrackKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Audio => "AUDIO",
            Self::Video => "VIDEO",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "AUDIO" => Some(Self::Audio),
            "VIDEO" => Some(Self::Video),
            _ => None,
        }
    }
}
